//SELECT pulls the genre collum from the movies data
//DISTINCT makes sure it gets no copys 
// FROM selects the data name 

SELECT DISTINCT genre
FROM movies; 

// same thing but gets the year collum from the movie data

SELECT DISTINCT year
FROM movies;

// How does it work?

// The WHERE clause filters the result set to only include rows where the following condition is true.
// imdb_rating > 8 is the condition. Here, only rows with a value greater than 8 in the imdb_rating column will be returned.
// The > is an operator. Operators create a condition that can be evaluated as either true or false.



SELECT *
FROM movies
WHERE imdb_rating > 8;


SELECT *
FROM movies
WHERE imdb_rating < 5;

SELECT *
FROM movies
WHERE year > 2014;


// LIKE

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';


The percentage sign % is another wildcard character that can be used with 
Preview: Docs Loading link description
LIKE
.

// This statement filters the result set to only include movies
// with names that begin with the letter ‘A’:

SELECT * 
FROM movies
WHERE name LIKE 'A%';


// IS NULL _ IS NOT NULL 

SELECT name
FROM movies 
WHERE imdb_rating IS NOT NULL;

// will show result of movie names without a rating
SELECT name 
FROM movies
WHERE imdb_rating IS NULL;


// BETWEEN

SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;


SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';



SELECT *
FROM movies
WHERE year BETWEEN '1970' AND '1979' 

// AND
SELECT * 
FROM movies
WHERE year BETWEEN 1990 AND 1999
   AND genre = 'romance';

   SELECT *
   FROM movies
   WHERE year BETWEEN 1970 AND 1979
     AND imdb_rating > 8;

     
     SELECT *
     FROM movies
     WHERE year < 1985
        AND genre = 'horror';

// OR

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';

   SELECT *
   FROM movies
   WHERE genre = 'romance';
      OR genre = 'action';


// ORDER BY alphabet or numerically
SELECT *
FROM movies
ORDER BY name;


//LIMIT - LIMITS AMOUNT OF RESULTS THAT COMES BK 
SELECT *
FROM movies
LIMIT 10;


// TOP 3 RATED MOVIES

SELECT * // SELECTS ALL
FROM movies // FROM MOVIE DATA
ORDER BY imdb_rating DESC // ORDERS THEM BY RATINGS
LIMIT 3; // LIMITS THE RESULT TO 3 GIVING THE TOP 3 RATED MOVIES


SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END AS 'Review'
FROM movies;


SELECT name,
 CASE
 WHEN genre = 'romance' THEN 'Chill'
 WHEN genre = 'comedy' THEN 'Chill'
 ELSE 'Intense'
 END AS 'Mood'
 FROM movies;

 //SUM - gives result of amount of files in a column
 SELECT SUM(downloads) // how many items are in the colum downloads
 FROM fake_apps;


 // max() & min() functions that return highest and lowest value 

 SELECT MIN(downloads) // least popular app has 1387 downloads
 FROM fake_apps;

 SELECT MAX(downloads) // most popular app has 31,090 downloads
 FROM fake_apps;

 // AVG() avarage value of selected column

 SELECT AVG(downloads)
 FROM fake_apps; 







